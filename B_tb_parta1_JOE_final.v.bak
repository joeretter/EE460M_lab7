//Joe's testbench part a #1
// You can use this skeleton testbench code, the textbook testbench code, or your own
module MIPS_Testbench_B ();
  reg CLK;
  reg RST;
  wire CS;
  wire WE;
  reg [2:0] switches; 
  wire [31:0] Mem_Bus;
  wire [6:0] Address;
  wire [31:0] reg_2, reg_3; 
  
  integer i, a, instr; 
  

  initial
  begin
    CLK = 1;
    switches = 3'b0; 
    RST = 1'b1;
	
	repeat (2) begin
		@(posedge CLK);
	end
	RST = 1'b0;
  end

  
  MIPS CPU(CLK, RST, switches, CS, WE, Address, Mem_Bus, reg_2, reg_3);
  Memory MEM(CS, WE, CLK, Address, Mem_Bus);

  always
  begin
    #5 CLK = !CLK; //posedge clk occurs every 10 ns
  end

  always @(posedge CLK)
  begin
	#2;
	$display("display state: %d,  nstate: %d", CPU.state, CPU.nstate);
	$strobe("strobe state: %d,  nstate: %d", CPU.state, CPU.nstate);
	$display("opcode is: %b,  pc is: %d, npc %d", CPU.instr[31:26], CPU.pc, CPU.npc);
	$display("$31 is: %d", CPU.Register.REG[31]);
	for(a = 0; a < 9; a = a + 1 )
	begin 
	$display("$%d is: %d", a, CPU.Register.REG[a]);
	end 
   end 	
endmodule